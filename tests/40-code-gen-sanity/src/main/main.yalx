package main

@yalx.Compiler(nativeHandle=true)
fun main() {
    display("Hello, World")
}

fun sanity() {
    val e1 = Optional<int>::None
    val e2 = Optional<string>::None
}

fun issue1(): int {
    val a,b,c = foo()
    val d = a + b
    return d
}

fun issue2() -> doo(1,2,3)

fun issue3(a: int, b: int) -> doo(b, a, a + b)

fun issue4(a: int, b: int) -> doo(a, b, a + b)

fun issue5() -> 1,2,3,4

@yalx.Compiler(nativeHandle=true)
fun issue6(a: int, b: int) -> 
    if (a > b) {
        val r,_,_,_ = issue5()
        r + a + b
    } else {
        -1
    }

fun issue7(a: f32, b: f32) ->
    if (a < b) {
        -1
    } else if (a > b) {
        1
    } else {
        0
    }

fun issue8(a: int, b: int) -> a < b

@yalx.Compiler(nativeStubName="issue9_stub")
native fun issue9(a: int, b: string): int

@yalx.Compiler(nativeStubName="issue10_stub")
native fun issue10(): int, int, int, string

@yalx.Compiler(nativeHandle=true)
fun issue11() {
    val a, b, c, d = issue10()
    assertInt(1, a)
    assertInt(2, b)
    assertInt(3, c)
    assertString("hello", d)
}

fun foo() -> 1,2,1.1

fun doo(a: int, b: int, c: int) -> a + b + c

@yalx.Compiler(nativeStubName="yalx_Zplang_Zolang_Zdprintln_stub")
native fun display(s: string)

@yalx.Compiler(nativeStubName="assert_string_stub")
native fun assertString(a: string, b: string)

@yalx.Compiler(nativeStubName="assert_int_stub")
native fun assertInt(a: int, b: int)
