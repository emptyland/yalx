package main

import "foo"

val e0 = foo.Optional<i32>::None
val e1 = foo.Optional<i32>::Some(1)

val e2 = foo.Foo::A
val e3 = foo.Foo::B("ok")
val e4 = foo.Foo::C(1u8, 2u8, 3u8, 4u8)
val e5 = foo.Foo::D(foo.Optional<int>::Some(1))

fun issue00_enum_value() -> foo.Foo::A

fun issue01_enum_string_value() -> foo.Foo::B("hello")

fun issue02_enum_of_enum() -> foo.Foo::D(foo.Optional<int>::Some(997))

fun issue03_enum_compact_value(): foo.Optional<string> {
    val e0 = foo.Optional<string>::None
    val e1 = foo.Optional<string>::Some("ok")
    return e1
}

fun issue04_compact_enum_matching(e: foo.Optional<string>) {
    when (e) {
        None -> {}
        Some(message) -> println(message)
    }
}

fun issue05_enum_matching(e: foo.Foo) {
    when (e) {
        A -> {}
        B(s) -> println(s)
        C(a,b,c,d) -> {}
        D(o) -> {}
    }
}