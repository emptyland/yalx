package issue06

enum Foo {
    A,
    B(u8),
    C(int),
    D(string),
    E
}

enum Option<T> {
    None,
    Some(T)

    fun unwarpOr(defaultVal: T) -> when(this) {
        None -> defaultVal
        Some(value) -> value
    }
}

@yalx.Compiler(nativeHandle=true)
fun issue1() -> Foo::A, Foo::E

@yalx.Compiler(nativeHandle=true)
fun issue2() -> Foo::B(122u8)

@yalx.Compiler(nativeHandle=true)
fun issue3() -> Foo::D("ok")


@yalx.Compiler(nativeHandle=true)
fun issue10() -> Option<int>::None

@yalx.Compiler(nativeHandle=true)
fun issue11() -> Option<string>::Some("option").unwarpOr("")

@yalx.Compiler(nativeHandle=true)
fun issue12() -> Optional<Bar>::Some(Bar(1, 2)).unwarpOr(Bar(996, 700))

@yalx.Compiler(nativeHandle=true)
fun issue13() -> @Optional<string>[]{Optional<string>::None, Optional<string>::Some("ok")}

@yalx.Compiler(nativeHandle=true)
fun issue14() -> @Optional<string>[2,2](Optional<string>::None)

@yalx.Compiler(nativeHandle=true)
fun issue15(): Optional<string>[,] {
    val a = @Optional<string>[2,2](Optional<string>::None)
    a[0,0] = Optional<string>::Some("ok")
    a[1,1] = Optional<string>::Some("hello")
    return a
}


struct Bar(val x: int, val y: int)