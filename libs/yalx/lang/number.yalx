package lang

@Lang
struct Number<T>(val value: T) {
    fun toI8() -> value as i8
    fun toU8() -> value as u8
    fun toI16() -> value as i16
    fun toU16() -> value as u16
    fun toI32() -> value as i32
    fun toU32() -> value as u32
    fun toI64() -> value as i64
    fun toU64() -> value as u64
    fun toF32() -> value as f32
    fun toF64() -> value as f64
}

@Lang
struct I32(value: i32): Number<i32>(value) {
    native fun toString(): string
}

@Lang
struct U32(value: u32): Number<u32>(value) {
    native fun toString(): string
}


@Lang
native fun u8ToString(v: u8): string

fun u8Equals(s: u8, v: u8) -> s == v

@Lang
native fun i8ToString(v: i8): string

@Lang
native fun u16ToString(v: u16): string

@Lang
native fun i16ToString(v: i16): string

@Lang
native fun u32ToString(v: u32): string

@Lang
native fun i32ToString(v: i32): string

@Lang
native fun u64ToString(v: u64): string

@Lang
native fun i64ToString(v: i64): string

@Lang
native fun f32ToString(v: f32): string

@Lang
native fun f64ToString(v: f64): string